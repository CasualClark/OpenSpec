# Security Headers and Protection Configuration
# Comprehensive security hardening for Task MCP HTTP Server

# Security Headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'self';" always;
add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;

# Remove server tokens
server_tokens off;

# Request size limits
client_max_body_size 10M;
client_body_buffer_size 128k;
client_header_buffer_size 1k;
large_client_header_buffers 4 4k;

# Connection limits
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn conn_limit_per_ip 20;

# Request rate limiting
limit_req_status 429;
limit_req_log_level warn;

# DDoS protection
# Burst capacity and rate limiting per endpoint
limit_req_zone $binary_remote_addr zone=api_burst:10m rate=30r/m burst=10 nodelay;
limit_req_zone $binary_remote_addr zone=sse_burst:10m rate=10r/m burst=5 nodelay;
limit_req_zone $binary_remote_addr zone=auth_burst:10m rate=60r/m burst=20 nodelay;

# IP-based blocking (configure as needed)
# deny 192.168.1.1;
# deny 10.0.0.0/8;

# Allowed HTTP methods
if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
    return 405;
}

# Block suspicious user agents
if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
    return 403;
}

# Prevent access to hidden files
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Prevent access to backup files
location ~ ~$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Block common attack patterns
location ~* \.(aspx|php|jsp|cgi)$ {
    deny all;
}

# Security for API endpoints
location ~ ^/(api|sse|mcp) {
    # Validate content-type for POST requests
    if ($request_method = POST) {
        add_header Content-Type "application/json" always;
    }
    
    # Add security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
}

# CORS preflight handling
location ~ \* {
    if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Max-Age "86400" always;
        add_header Content-Length "0" always;
        add_header Content-Type "text/plain" always;
        return 204;
    }
}