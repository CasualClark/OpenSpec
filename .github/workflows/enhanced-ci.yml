name: Enhanced CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_pr:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run tests
        run: pnpm test

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-pr
          path: coverage/
          retention-days: 7

  test_matrix:
    name: Test (${{ matrix.label }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            shell: bash
            label: linux-bash
          - os: macos-latest
            shell: bash
            label: macos-bash
          - os: windows-latest
            shell: pwsh
            label: windows-pwsh

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Print environment diagnostics
        run: |
          node -p "JSON.stringify({ platform: process.platform, arch: process.arch, shell: process.env.SHELL || process.env.ComSpec || '' })"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run tests
        run: pnpm test

      - name: Upload test coverage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-main
          path: coverage/
          retention-days: 7

  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Type check
        run: pnpm exec tsc --noEmit

      - name: Check for build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "dist/cli/index.js" ]; then
            echo "Error: CLI entry point not found"
            exit 1
          fi

  python-matrix-tests:
    name: Python ${{ matrix.python-version }} Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('test/python/requirements.txt', 'test/python/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema pytest pytest-cov
      
      - name: Test Python environment
        run: |
          python --version
          python -c "import jsonschema, pytest; print('✓ Dependencies available')"
      
      - name: Test jsonschema functionality
        run: |
          cat > test_jsonschema.py << 'EOF'
          import jsonschema
          import json
          
          # Test basic schema validation
          schema = {
              'type': 'object',
              'properties': {
                  'name': {'type': 'string'},
                  'age': {'type': 'integer'}
              },
              'required': ['name']
          }
          
          # Valid data
          valid_data = {'name': 'John', 'age': 30}
          jsonschema.validate(instance=valid_data, schema=schema)
          print('✓ Valid data validation passed')
          
          # Invalid data should raise exception
          try:
              invalid_data = {'age': 30}
              jsonschema.validate(instance=invalid_data, schema=schema)
              print('✗ Should have failed validation')
              exit(1)
          except jsonschema.exceptions.ValidationError:
              print('✓ Invalid data correctly rejected')
          EOF
          python test_jsonschema.py
      
      - name: Run basic Python tests if available
        run: |
          if [ -d "test/python/tests" ]; then
            python -m pytest test/python/tests/ -v --tb=short || echo "No Python tests found, skipping"
          else
            echo "No Python test directory found, skipping"
          fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Measure build performance
        run: |
          echo "Measuring build performance..."
          start_time=$(date +%s)
          pnpm run build
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Build time: ${build_time}s"
          
          if [ $build_time -gt 60 ]; then
            echo "⚠️ Build time exceeds 60 seconds"
            exit 1
          fi
          echo "✅ Build performance acceptable"
      
      - name: Measure test performance
        run: |
          echo "Measuring test performance..."
          start_time=$(date +%s)
          pnpm test
          end_time=$(date +%s)
          test_time=$((end_time - start_time))
          echo "Test time: ${test_time}s"
          
          if [ $test_time -gt 120 ]; then
            echo "⚠️ Test time exceeds 120 seconds"
            exit 1
          fi
          echo "✅ Test performance acceptable"

  validate-changesets:
    name: Validate Changesets
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate changesets
        run: |
          if command -v changeset &> /dev/null; then
            pnpm exec changeset status --since=origin/main
          else
            echo "Changesets not configured, skipping validation"
          fi

  required-checks-pr:
    name: All checks passed
    runs-on: ubuntu-latest
    needs: [test_pr, lint, python-matrix-tests, performance-tests]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Verify all checks passed
        run: |
          if [[ "${{ needs.test_pr.result }}" != "success" ]]; then
            echo "Test job failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.python-matrix-tests.result }}" != "success" ]]; then
            echo "Python matrix tests failed"
            exit 1
          fi
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "Performance tests failed"
            exit 1
          fi
          echo "All required checks passed!"

  required-checks-main:
    name: All checks passed
    runs-on: ubuntu-latest
    needs: [test_matrix, lint, python-matrix-tests, performance-tests]
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Verify all checks passed
        run: |
          if [[ "${{ needs.test_matrix.result }}" != "success" ]]; then
            echo "Matrix test job failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.python-matrix-tests.result }}" != "success" ]]; then
            echo "Python matrix tests failed"
            exit 1
          fi
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "Performance tests failed"
            exit 1
          fi
          echo "All required checks passed!"